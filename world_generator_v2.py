import random


def create_blank_world(size_x=20, size_y=20, character=". "):
    """
    Creates a blank world out of size * size dots
    """
    world = []
    for line in range(size_y):
        world.append([])
        world[line] = size_x * [character]
    return world


def create_room(size_x=random.randint(1, 5), size_y=random.randint(1, 5)):
    """
    Creates a rectangular box/room with size_x * size_y floor tiles
    Requires: size_x, size_y > 0
    """
    top_bottom_walls = ["# "] * (size_x + 2)
    inner = ["# "] + ["_ "] * size_x + ["# "]

    room = [top_bottom_walls.copy()] + [inner.copy() for _ in range(size_y)] + [top_bottom_walls.copy()]

    coordinates = [[i, j] for i, x in enumerate(room) for j, y in enumerate(room[i]) if
                   y == "# "]  # Creates a wall coordinate list
    coordinates.remove([0, 0])
    coordinates.remove([0, len(room[0]) - 1])
    coordinates.remove([len(room) - 1, 0])
    coordinates.remove([len(room) - 1, len(room[0]) - 1])  # The 4 corners were removed from the wall coordinate list not allowing a door to generate in those corners

    door = random.choice(coordinates)
    coordinates.remove(door)
    door2 = random.choice(coordinates)
    coordinates.remove(door2)
    room[door[0]][door[1]] = "X "  # Adds the first door
    if random.choice([True, False]):
        room[door2[0]][door2[1]] = "X " # Adds the second door by chance
    return room, size_y, size_x


def add_room(world, amount=10):
    """
    Adds the room generated by create_room to the world map
    """
    for _ in range(amount):
        x, y = (random.randint(0, len(world) - 1),
                random.randint(0, len(world[0]) - 1))  # x and y coordinates of the top left corner of the room

        room_information = create_room(random.randint(1, 5), random.randint(1,
                                                                            5))  # Information about the room, includes to room itself, its width and then its height

        for line in range(len(world)):
            for column in range(len(world[0])):
                try:  # I use a try here so once an IndexError occurs, aka, it tries to add a block outside of the defined world map, it ignores that block and moves on to the next one
                    world[x + line][y + column] = room_information[0][line][column]
                except:
                    pass
    return world


def filter_world(world, filter_quality = 5):
    world_copy = create_blank_world(len(world) + 2, len(world[0]) + 2) # Copies the world and adds 2 columns and lines so no IndexError occurs when definining area and small_area
    for line in range(len(world)):
        for col in range(len(world[0])):
            world_copy[line+1][col+1] = world[line][col]

    for x in range(filter_quality):
        for line in range(len(world)):
            for col in range(len(world[0])):
                area = [world_copy[line][col], world_copy[line][col+1], world_copy[line][col+2],
                        world_copy[line+1][col], world_copy[line+1][col+2],
                        world_copy[line+2][col], world_copy[line+2][col+1], world_copy[line+2][col+2]]

                area_small = [world_copy[line][col+1],
                              world_copy[line+1][col], world_copy[line+1][col+2],
                              world_copy[line+2][col+1]]

                if world[line][col] == "X ":
                    wall_count = area_small.count("# ")
                    dot_count = area_small.count(". ")
                    if wall_count >= 3:
                        world[line][col] = "# " # If the door is between 3 walls, then it's bugged, and will be turned into a wall
                    if dot_count == 0 and wall_count == 2:
                        world[line][col] = "# " # If the door is not connected to a dot, aka, is not connected to the outside of the room, it'll be turned into a wall
                    elif dot_count == 0 and wall_count < 2:
                        world[line][col] = "_ " # If it's not connected to the outside, and there are less than two walls creating a doorway, then it gets turned into floor

                elif world[line][col] == "# ":
                    empty_count = area.count(". ")
                    if empty_count == 0:
                        world[line][col] = "_ " # Turns a wall into floor if it's not connected to the outside

                elif world[line][col] == "_ ": # If there is a diagonal adjacent empty space near a floor block then it gets turned into a wall
                    if world_copy[line][col] == ". ":
                        try:
                            world[line-1][col-1] = "# "
                        except IndexError:
                            pass
                    elif world_copy[line][col+2] == ". ":
                        try:
                            world[line-1][col+1] = "# "
                        except IndexError:
                            pass
                    elif world_copy[line+2][col] == ". ":
                        try:
                            world[line+1][col-1] = "# "
                        except IndexError:
                            pass
                    elif world_copy[line+2][col+2] == ". ":
                        try:
                            world[line+1][col+1] = "# "
                        except IndexError:
                            pass

                if world[line][col] != ". " and (line == 0 or col == 0 or line == len(world)-1 or col == len(world[0])-1):
                    world[line][col] = "# " # If there's a tile in the border of the map that is not empty, it gets turned into a wall

        """for line in range(len(world)):
            for col in range(len(world[0])):
                area = [world_copy[line][col], world_copy[line][col+1], world_copy[line][col+2],
                        world_copy[line+1][col], world_copy[line+1][col+2],
                        world_copy[line+2][col], world_copy[line+2][col+1], world_copy[line+2][col+2]]
                if world[line][col] == "# " or world[line][col] == "X ":"
                    floor_count = area.count("_ ")
                    if floor_count == 0:
                        world[line][col] = ". """
    return world

def show_world(world):
    """
    Shows the world parameter in the form a string instead of a list, being separated by line breaks (\n)
    """
    rendered_world = ""
    for line in range(len(world)):
        rendered_world += ''.join(world[line])
        rendered_world += "\n"
    rendered_world = rendered_world.strip()
    return rendered_world


def world_generator():
    world = create_blank_world()
    world = add_room(world)
    world = filter_world(world)
    world_blocks = {
        ". ": [],
        "# ": [],
        "_ ": [],
        "X ": []
    }
    for line in range(len(world)):
        for col in range(len(world[0])):
            if world[line][col] != "X ":
                world_blocks[world[line][col]].append([line, col])
            else:
                pass

    return world, world_blocks
